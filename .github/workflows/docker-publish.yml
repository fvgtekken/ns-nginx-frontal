name: publish
on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/ns-nginx-frontal:latest

jobs:
  publish:
    name: Publish Image
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '[update-rules]') }}
    steps:
      - uses: actions/checkout@v4
      - name: Login
        run: |
          echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build Nginx Frontal Service - Create Image
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
    needs: publish
    name: Deploy Image
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '[update-rules]') }}
    steps:
      - name: Install SSH Keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - uses: actions/checkout@v4
      - name: Pull Latest Changes
        run: git pull
        working-directory: ${{ github.workspace }}
      - name: Verify and Create Directory on Remote Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.WORK_DIR }}/nginx/rules"
      - name: Copy compose.yml to remote server
        run: scp compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}
      - name: Copy nginx.conf to Remote Server
        run: scp  ./nginx/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}/nginx/
      - name: Copy ModSecurity Rules to Remote Server
        run: scp -r ./nginx/rules ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}/nginx/
      - name: Cleanup
        run: rm -rf ~/.ssh

  update-rules:
    name: Update ModSecurity Rules
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && contains(github.event.head_commit.message, '[update-rules]') }}
    steps:
      - name: Install SSH Keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - uses: actions/checkout@v4
      - name: Pull Latest Changes
        run: git pull
        working-directory: ${{ github.workspace }}
      - name: Verify and Create Directory on Remote Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.WORK_DIR }}/nginx/rules"
      - name: Copy compose.yml to remote server
        run: scp compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}
      - name: Copy nginx.conf to Remote Server
        run: scp  ./nginx/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}/nginx/nginx.conf
      - name: Copy modsec.conf to Remote Server
        run: scp  ./nginx/modsec.conf ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}/nginx/modsec.conf
      - name: Copy ModSecurity Rules to Remote Server
        run: scp -r ./nginx/rules ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}/nginx/
      - name: Docker compose up - Apply New Rules - New Config ngix
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && docker compose pull && docker compose up -d && exit"
      - name: Cleanup
        run: rm -rf ~/.ssh
