# Carga el módulo ModSecurity
load_module modules/ngx_http_modsecurity_module.so;

events {}

http {
    # Activa ModSecurity y carga las reglas
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec.conf;
  
    include /etc/nginx/mime.types;
    server_tokens off;
    charset utf-8;

   
    # Header Anti-clickjacking
    add_header X-Frame-Options "SAMEORIGIN"; # o "DENY" según necesidad

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Buffering para prevenir ataques DoS
    client_body_buffer_size 8k;
    client_header_buffer_size 8k;
    client_max_body_size 20M;
    large_client_header_buffers 4 8k;

    # Limita las solicitudes
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:5m rate=20r/s;

    upstream ns-admin {
        server ns-admin:5001;
    }

    upstream ns-front {
        server ns-front:5000;
    }

    # Redirecciona tráfico HTTP a HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name srv498956.hstgr.cloud;

        location /.well-known/acme-challenge/ {
            rewrite ^/\.well-known/acme-challenge(.*) $1 break;
            alias /home/fcvg-certbot/www/certbot/.well-known/acme-challenge/;
        }

        # Bloquea solicitudes peligrosas
        if ($request_uri ~* "\.(php|sh)") {
            return 403;
        }

        location ~ /\.(ht|git|svn|env) {
            deny all;
        }

        location / {
            return 301 https://$server_name$request_uri;
        }

        limit_req zone=req_limit_per_ip burst=20 nodelay;
    }

    # Configuración HTTPS principal
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name srv498956.hstgr.cloud;

        ssl_certificate /etc/letsencrypt/live/srv498956.hstgr.cloud/cert.pem;
        ssl_certificate_key /etc/letsencrypt/live/srv498956.hstgr.cloud/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # Ubicación para `ns-admin`
        location / {


            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            proxy_read_timeout 10s;
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_pass http://ns-admin;
            proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            proxy_intercept_errors on;
            error_page 502 = @ns-front_fallback;
            limit_req zone=req_limit_per_ip burst=20 nodelay;
        }

        # Ubicación para `ns-front`
        location /main-site {


            add_header Access-Control-Allow-Origin https://res.cloudinary.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            proxy_read_timeout 10s;
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_pass http://ns-front;
            proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
            proxy_intercept_errors on;
            error_page 502 = @ns-front_fallback;
            limit_req zone=req_limit_per_ip burst=20 nodelay;
        }

        # Fallbacks
        location @ns-admin_fallback {
            return 503;
        }

        location @ns-front_fallback {
            return 503;
        }

        # Página de error personalizada
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Configuración predeterminada
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name srv498956.hstgr.cloud;

        ssl_certificate /etc/letsencrypt/live/srv498956.hstgr.cloud/cert.pem;
        ssl_certificate_key /etc/letsencrypt/live/srv498956.hstgr.cloud/privkey.pem;

        location / {
            return 503;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
